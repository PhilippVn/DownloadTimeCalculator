package ui;

import downloadtimecalculator.Calculator;
import downloadtimecalculator.SizeUnit;
import downloadtimecalculator.SpeedUnit;
import org.checkerframework.checker.units.qual.C;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Objects;

public class MenuForm extends JFrame {
    private JTextField FileSizeText;
    private JLabel fileSizeLabel;
    private JLabel downloadSpeedLabel;
    private JTextField downloadSpeedText;
    private JLabel downloadTimeLabel; // change in code
    private JButton ExitButton;
    private JButton CalcButton;
    private JPanel menuPanel;
    private JComboBox SizeComboBox;
    private JComboBox SpeedComboBox;


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        menuPanel = new JPanel();
        menuPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 5, new Insets(0, 0, 0, 0), -1, -1));
        fileSizeLabel = new JLabel();
        fileSizeLabel.setText("File Size:");
        menuPanel.add(fileSizeLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        downloadSpeedLabel = new JLabel();
        downloadSpeedLabel.setText("Download Speed:");
        menuPanel.add(downloadSpeedLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        downloadTimeLabel = new JLabel();
        downloadTimeLabel.setText("Download Time:");
        menuPanel.add(downloadTimeLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CalcButton = new JButton();
        CalcButton.setText("Calc");
        menuPanel.add(CalcButton, new com.intellij.uiDesigner.core.GridConstraints(5, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        menuPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        menuPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        FileSizeText = new JTextField();
        menuPanel.add(FileSizeText, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        downloadSpeedText = new JTextField();
        menuPanel.add(downloadSpeedText, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        SizeComboBox = new JComboBox();
        menuPanel.add(SizeComboBox, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SpeedComboBox = new JComboBox();
        menuPanel.add(SpeedComboBox, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ExitButton = new JButton();
        ExitButton.setText("Exit");
        menuPanel.add(ExitButton, new com.intellij.uiDesigner.core.GridConstraints(5, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return menuPanel;
    }


    // user generated code


    // options for the drop down menus
    private static final String[] fileSizeOptions = {"GB", "GiB", "MB", "MiB", "KB", "KiB", "B"};
    private static final String[] speedOptions = {"GB/s", "GiB/s", "MB/s", "MiB/s", "KB/s", "KiB/s", "B/s"};

    public MenuForm() {
        super("Download Time Calculator");
        this.setContentPane(this.menuPanel);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null); // center


        this.CalcButton.addActionListener(new ExitButtonAction());
        this.ExitButton.addActionListener(e -> System.exit(0));

        // init drop down menus
        for (String fileSizeOption : fileSizeOptions) {
            this.SizeComboBox.addItem(fileSizeOption);
        }

        for (String speedOption : speedOptions) {
            this.SpeedComboBox.addItem(speedOption);
        }

        this.pack();
        this.setVisible(true);
    }

    class ExitButtonAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            // new thread so the swing edt is not blocked (gui stays responsive)

            new Thread(() -> {
                // set and test if the user has set all required fields
                SizeUnit sizeUnit;
                SpeedUnit speedUnit;
                double fileSize;
                double downloadSpeed;
                try {
                    sizeUnit = parseSizeUnit(Objects.requireNonNull(SizeComboBox.getSelectedItem()).toString());
                    speedUnit = parseSpeedUnit((Objects.requireNonNull(SpeedComboBox.getSelectedItem()).toString()));
                    fileSize = Double.parseDouble(FileSizeText.getText());
                    downloadSpeed = Double.parseDouble(downloadSpeedText.getText());

                    if (fileSize <= 0 || fileSize > Double.MAX_VALUE || downloadSpeed <= 0 || downloadSpeed > Double.MAX_VALUE) {
                        throw new IllegalArgumentException("Invalid Size");
                    }
                } catch (Exception ex) {
                    // alert the user of invalid input
                    JOptionPane.showMessageDialog(MenuForm.this, ex.getMessage());
                    return;
                }
                // calculating download speed
                Calculator calc = new Calculator(sizeUnit, speedUnit, fileSize, downloadSpeed);
                String downloadTimeRemaining = calc.getRemainingDownloadTime(true);

                //update GUI on EDT
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        downloadTimeLabel.setText("<html>Download Time: <b>" + downloadTimeRemaining + "</b></html>");
                    }
                });

            }).start();
        }
    }


    /**
     * attempts to parse a SpeedUnit from given String
     *
     * @param s String to be parsed
     * @return SpeedUnit
     * @throws IllegalArgumentException if s is not a SpeedUnit (should not happen)
     */
    private SpeedUnit parseSpeedUnit(String s) throws IllegalArgumentException {
        if (!Arrays.asList(speedOptions).contains(s)) {
            throw new IllegalArgumentException("Invalid Speed Unit");
        }
        return SpeedUnit.valueOf(switch (s) {
            case "GB/s" -> SpeedUnit.GIGABYTES_PER_SECOND.name();
            case "GiB/s" -> SpeedUnit.GIBIBYTES_PER_SECOND.name();
            case "MB/s" -> SpeedUnit.MEGABYTES_PER_SECOND.name();
            case "MiB/s" -> SpeedUnit.MEBIBYTES_PER_SECOND.name();
            case "KB/s" -> SpeedUnit.KILOBYTES_PER_SECOND.name();
            case "KiB/s" -> SpeedUnit.KIBIBYTES_PER_SECOND.name();
            case "B/s" -> SpeedUnit.BYTES_PER_SECOND.name();
            default -> "";
        });
    }

    /**
     * attempts to parse a SizeUnit from given String
     *
     * @param s String to be parsed
     * @return SizeUnit
     * @throws IllegalArgumentException if s is not a SizeUnit (should not happen)
     */
    private SizeUnit parseSizeUnit(String s) throws IllegalArgumentException {
        if (!Arrays.asList(fileSizeOptions).contains(s)) {
            throw new IllegalArgumentException("Invalid Speed Unit");
        }
        return SizeUnit.valueOf(switch (s) {
            case "GB" -> SizeUnit.GIGA_BYTE.name();
            case "GiB" -> SizeUnit.GIBI_BYTE.name();
            case "MB" -> SizeUnit.MEGA_BYTE.name();
            case "MiB" -> SizeUnit.MEBI_BYTE.name();
            case "KB" -> SizeUnit.KILO_BYTE.name();
            case "KiB" -> SizeUnit.KIBI_BYTE.name();
            case "B" -> SizeUnit.BYTE.name();
            default -> "";
        });
    }
}
